AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for setting up resources for a weather-app application.

Parameters:
  VpcCidrBlock:
    Type: String
    Default: "192.168.0.0/16"
    Description: The CIDR block for the VPC.

  PublicSubnet1Cidr:
    Type: String
    Default: "192.168.0.0/24"

  PublicSubnet2Cidr:
    Type: String
    Default: "192.168.2.0/24"

  PrivateSubnet1Cidr:
    Type: String
    Default: "192.168.1.0/24"

  PrivateSubnet2Cidr:
    Type: String
    Default: "192.168.3.0/24"

  Subnet1AZ:
    Type: String
    Default: "us-east-1a"

  Subnet2AZ:
    Type: String
    Default: "us-east-1b"

  ClusterName:
    Type: String
    Default: "weather-app-cluster"

  InstanceType:
    Type: String
    Default: "t2.micro"

  DesiredSize:
    Type: Number
    Default: 3

  MinSize:
    Type: Number
    Default: 3

  MaxSize:
    Type: Number
    Default: 4

Resources:
  WeatherAppVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: todo_app_vpc

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WeatherAppVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Ref Subnet1AZ
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: my_public_subnet1
        - Key: kubernetes.io/cluster/${ClusterName}
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: 1

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WeatherAppVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Ref Subnet2AZ
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: my_public_subnet2
        - Key: kubernetes.io/cluster/${ClusterName}
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: 1

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WeatherAppVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Ref Subnet1AZ
      Tags:
        - Key: Name
          Value: my_private_subnet1
        - Key: kubernetes.io/cluster/${ClusterName}
          Value: shared

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WeatherAppVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Ref Subnet2AZ
      Tags:
        - Key: Name
          Value: my_private_subnet2
        - Key: kubernetes.io/cluster/${ClusterName}
          Value: shared

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: MainInternetGateway

  GatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref WeatherAppVPC
      InternetGatewayId: !Ref InternetGateway

  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId:
        Fn::GetAtt: 
          - NatEIP1
          - AllocationId

  NatEIP1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGateway2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      SubnetId: !Ref PublicSubnet2
      AllocationId:
        Fn::GetAtt: 
          - NatEIP2
          - AllocationId

  NatEIP2:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WeatherAppVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WeatherAppVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable1

  PrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway1

  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WeatherAppVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable2

  PrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway2

  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  EksSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for EKS cluster'
      VpcId: !Ref WeatherAppVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'

  EksClusterRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: eks_cluster_role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EksWorkerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: eks_worker_role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  EksWorkerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: eks_worker_instance_profile
      Roles:
        - !Ref EksWorkerRole

  EksCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EksClusterRole.Arn
      Version: '1.18'
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EksSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  EksNodeGroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: !Ref EksCluster
      NodeRole: !GetAtt EksWorkerRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      ScalingConfig:
        MinSize: !Ref MinSize
        MaxSize: !Ref MaxSize
        DesiredSize: !Ref DesiredSize
      InstanceTypes:
        - !Ref InstanceType


Outputs:
  ClusterEndpoint:
    Description: "The endpoint for your EKS Kubernetes API."
    Value: !GetAtt EksCluster.Endpoint

  SubnetIds:
    Description: "The IDs of the subnets used by the EKS cluster"
    Value: 
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2

  SecurityGroupId:
    Description: "The ID of the security group used by the EKS cluster"
    Value: !Ref EksSecurityGroup



